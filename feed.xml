<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://dyddn3994.github.io/</id><title>Yulmw</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2022-04-13T20:18:01+09:00</updated> <author> <name>dyddn3994</name> <uri>https://dyddn3994.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://dyddn3994.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko" href="https://dyddn3994.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 dyddn3994 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Hooks</title><link href="https://dyddn3994.github.io/posts/Hooks/" rel="alternate" type="text/html" title="Hooks" /><published>2022-04-13T20:13:49+09:00</published> <updated>2022-04-13T20:13:49+09:00</updated> <id>https://dyddn3994.github.io/posts/Hooks/</id> <content src="https://dyddn3994.github.io/posts/Hooks/" /> <author> <name>dyddn</name> </author> <category term="Front-end" /> <category term="React" /> <category term="리액트를 다루는 기술" /> <summary> Hooks는 리액트 v16.8에 새로 도입된 기능으로 함수형 컴포넌트에서 여러 작업을 할 수 있게 해 준다. useState useState는 함수형 컴포넌트에서도 가변적인 상태를 지닐 수 있게 한다. import React, { useState } from 'react'; const Info = () =&amp;gt; { const [name, setName] = useState(''); const [nickname, setNickname] = useState(''); const onChangeName = e =&amp;gt; { setName(e.target.value); }; const onChangeNickname = e =&amp;gt; { setNickname(e.targ... </summary> </entry> <entry><title>컴포넌트의 라이프사이클 메서드</title><link href="https://dyddn3994.github.io/posts/%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4-%EB%A9%94%EC%84%9C%EB%93%9C/" rel="alternate" type="text/html" title="컴포넌트의 라이프사이클 메서드" /><published>2022-04-12T00:40:44+09:00</published> <updated>2022-04-12T00:40:44+09:00</updated> <id>https://dyddn3994.github.io/posts/%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4-%EB%A9%94%EC%84%9C%EB%93%9C/</id> <content src="https://dyddn3994.github.io/posts/%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4-%EB%A9%94%EC%84%9C%EB%93%9C/" /> <author> <name>dyddn</name> </author> <category term="Front-end" /> <category term="React" /> <category term="리액트를 다루는 기술" /> <summary> 모든 리액트 컴포넌트는 라이프사이클(수명 주기)이 존재한다. 컴포넌트의 수명은 페이지에 렌더링되기 전 준비 과정에서 시작하여 페이지에서 사라질 때 끝난다. 리액트 프로젝트에서 컴포넌트를 처음으로 렌더링할 때 어떤 작업을 처리해야 하거나 컴포넌트를 업데이트하기 전후로 어떤 작업을 처리해야 할 수도 있고, 불필요한 업데이트를 방지해야 할 수도 있다. 이러한 상황에 컴포넌트의 라이프사이클 메서드를 사용한다. 라이프사이클 메서드는 클래스형 컴포넌트에서만 사용할 수 있고 함수형 컴포넌트에서는 Hooks 기능을 사용하여 비슷한 작업을 처리한다. 라이프사이클 메서드의 이해 라이프사이클 메서드의 종류는 총 아홉 가지이다. Will 접두사가 붙은 메서드는 작업을 작동하기 전에 실행되는 메서드이고, Did 접두사가 ... </summary> </entry> <entry><title>컴포넌트 반복</title><link href="https://dyddn3994.github.io/posts/%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%B0%98%EB%B3%B5/" rel="alternate" type="text/html" title="컴포넌트 반복" /><published>2022-04-11T20:18:01+09:00</published> <updated>2022-04-11T21:13:39+09:00</updated> <id>https://dyddn3994.github.io/posts/%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%B0%98%EB%B3%B5/</id> <content src="https://dyddn3994.github.io/posts/%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%B0%98%EB%B3%B5/" /> <author> <name>dyddn</name> </author> <category term="Front-end" /> <category term="React" /> <category term="리액트를 다루는 기술" /> <summary> 자바스크립트 배열의 map() 함수 자바스크립트 배열 객체의 내장 함수인 map 함수를 사용하여 반복되는 컴포넌트를 렌더링할 수 있다. map 함수는 파라미터로 전달된 함수를 사용하여 배열 내 각 요소를 원하는 규칙에 따라 변환한 후 결과를 새로운 배열로 생성한다. arr.map(callback, [thisArg]) 파라미터는 다음과 같다. callback : 새로운 배열의 요소를 생성하는 함수로 파라미터는 다음 세 가지이다. currentValue : 현재 처리하고 있는 요소 index : 현재 처리하고 있는 요소의 index 값 array : 현재 처리하고 있는 원본 배열 thisArg(선택 항목) : callback 함수 내부에서... </summary> </entry> <entry><title>이벤트 핸들링</title><link href="https://dyddn3994.github.io/posts/%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%95%B8%EB%93%A4%EB%A7%81/" rel="alternate" type="text/html" title="이벤트 핸들링" /><published>2022-04-08T17:37:12+09:00</published> <updated>2022-04-08T17:37:53+09:00</updated> <id>https://dyddn3994.github.io/posts/%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%95%B8%EB%93%A4%EB%A7%81/</id> <content src="https://dyddn3994.github.io/posts/%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%95%B8%EB%93%A4%EB%A7%81/" /> <author> <name>dyddn</name> </author> <category term="Front-end" /> <category term="React" /> <category term="리액트를 다루는 기술" /> <summary> 이벤트 핸들링 사용자가 웹 브라우저에서 DOM 요소들과 상호 작용하는 것을 이벤트라고 한다. 이벤트 사용에 주의할 점 이벤트 이름은 카멜 표기법으로 작성한다. HTML의 onclick은 리액트에서 onClick으로 onkeyup은 onKeyUp으로 작성해야 한다. 이벤트에서 실행할 자바스크립트 코드를 전달하는 것이 아니라 함수 형태의 값을 전달한다. HTML에서 이벤트를 설정할 때는 큰따옴표 안에 실행할 코드를 넣었지만 리액트에서는 함수 형태의 객체를 전달한다. DOM 요소에만 이벤트를 설정할 수 있다. div, button, input, form, span 등의 DOM 요소에는 이벤트를 설정할 수 있지만, 직접 만든 컴포넌트에는 이벤트를 자체적으로 ... </summary> </entry> <entry><title>state</title><link href="https://dyddn3994.github.io/posts/state/" rel="alternate" type="text/html" title="state" /><published>2022-04-07T00:05:34+09:00</published> <updated>2022-04-08T17:37:34+09:00</updated> <id>https://dyddn3994.github.io/posts/state/</id> <content src="https://dyddn3994.github.io/posts/state/" /> <author> <name>dyddn</name> </author> <category term="Front-end" /> <category term="React" /> <category term="리액트를 다루는 기술" /> <summary> state props는 컴포넌트가 사용되는 과정에서 부모 컴포넌트가 설정하는 값이며, 컴포넌트 자신은 해당 props를 읽기 전용으로만 사용할 수 있고 props를 바꾸려면 부모 컴포넌트에서 바꾸어 주어야 한다. 컴포넌트 내부에서 바뀔 수 있는 값은 state라고 한다. 리액트에는 두 가지 종류의 state가 있다. 하나는 클래스형 컴포넌트가 지니고 있는 state이고, 다른 하나는 함수형 컴포넌트에서 useState라는 함수를 통해 사용하는 state이다. 클래스형 컴포넌트의 state 클래스형 컴포넌트에서 state를 사용하는 예시이다. import React, { Component } from 'react'; class Counter extends Component { construct... </summary> </entry> </feed>
