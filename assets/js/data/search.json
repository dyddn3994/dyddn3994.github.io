[ { "title": "Hooks", "url": "/posts/Hooks/", "categories": "Front-end, React, 리액트를 다루는 기술", "tags": "Hooks", "date": "2022-04-13 20:13:49 +0900", "snippet": "Hooks는 리액트 v16.8에 새로 도입된 기능으로 함수형 컴포넌트에서 여러 작업을 할 수 있게 해 준다.useStateuseState는 함수형 컴포넌트에서도 가변적인 상태를 지닐 수 있게 한다.import React, { useState } from 'react';const Info = () =&gt; { const [name, setName] = useState(''); const [nickname, setNickname] = useState(''); const onChangeName = e =&gt; { setName(e.target.value); }; const onChangeNickname = e =&gt; { setNickname(e.target.value); }; return ( &lt;div&gt; &lt;div&gt; &lt;input value={name} onChange={onChangeName} /&gt; &lt;input value={nickname} onChange={onChangeNickname} /&gt; &lt;/div&gt; &lt;div&gt; &lt;div&gt; &lt;b&gt;이름:&lt;/b&gt; {name} &lt;/div&gt; &lt;div&gt; &lt;b&gt;닉네임:&lt;/b&gt; {nickname} &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; );};export default Info;useEffectuseEffect는 리액트 컴포넌트가 렌더링될 때마다 특정 작업을 수행하도록 설정할 수 있는 Hook이다. 클래스형 컴포넌트의 componentDidMount와 componentDidUpdate를 합친 형태로 보아도 무방하다.import React, { useState } from 'react';const Info = () =&gt; { const [name, setName] = useState(''); const [nickname, setNickname] = useState(''); useEffect(() =&gt; { console.log('렌더링이 완료되었습니다.'); console.log({ name, nickname }); }); const onChangeName = e =&gt; { setName(e.target.value); }; const onChangeNickname = e =&gt; { setNickname(e.target.value); }; return ( &lt;div&gt; &lt;div&gt; &lt;input value={name} onChange={onChangeName} /&gt; &lt;input value={nickname} onChange={onChangeNickname} /&gt; &lt;/div&gt; &lt;div&gt; &lt;div&gt; &lt;b&gt;이름:&lt;/b&gt; {name} &lt;/div&gt; &lt;div&gt; &lt;b&gt;닉네임:&lt;/b&gt; {nickname} &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; );};export default Info;마운트될 때만 실행마운트될 때만 실행하고 싶다면 (업데이트될때 실행하지 않으려면) 함수의 두 번째 파라미터로 비어 있는 배열을 넣어 주면 된다.useEffect(() =&gt; { console.log('마운트될 때만 실행');}, []);특정 값이 업데이트될 때만 실행특정 값이 변경될 때만 호출하고 싶다면 두 번째 파라미터로 전달되는 배열 안에 검사하고 싶은 값을 넣어 주면 된다. 배열 안에는 useState를 통해 관리하고 있는 상태를 넣어도 되고, props로 전달받은 값을 넣어도 된다.useEffect(() =&gt; { console.log(name);}, [name]);뒷정리하기컴포넌트가 언마운트되기 전이나 업데이트되기 직전에 어떠한 작업을 수행하고 싶다면 useEffect에서 뒷정리 함수를 반환해 주어야 한다.useEffect(() =&gt; { console.log('effect'); console.log(name); return () =&gt; { console.log('cleanup'); console.log(name); };});언마운트될 때만 뒷정리 함수를 호출하고 싶다면 두 번째 파라미터에 비어있는 배열을 넣으면 된다.useReduceruseReducer는 useState보다 더 다양한 컴포넌트 상황에 따라 다양한 상태를 다른 값으로 업데이트해 주고 싶을 때 사용하는 Hook이다. 리듀서 함수를 선언하여 사용하는데, 현재 상태와 업데이트를 위해 필요한 정보를 담은 액션 값을 전달받아 새로운 상태를 반환하는 함수이다. 리듀서 함수에서 새로운 상태를 만들 때는 반드시 불변성을 지켜야 한다.import React, { useReducer } from 'react';function reducer(state, action) { // action.type에 따라 다른 작업 수행 switch (action.type) { case 'INCREMENT': return { value: state.value + 1 }; case 'DECREMENT': return { value: state.value - 1 }; default: // 아무것도 해당되지 않을 때 기존 상태 반환 return state; }}const Counter = () =&gt; { const [state, dispatch] = useReducer(reducer, { value: 0 }); return ( &lt;div&gt; &lt;p&gt; 현재 카운터 값은 &lt;b&gt;{state.value}&lt;/b&gt;입니다. &lt;/p&gt; &lt;button onClick={() =&gt; dispatch({ type: 'INCREMENT' })}&gt;+1&lt;/button&gt; &lt;button onClick={() =&gt; dispatch({ type: 'DECREMENT' })}&gt;-1&lt;/button&gt; &lt;/div&gt; );};export default Counter;useReducer의 첫 번째 파라미터에는 리듀서 함수를 넣고, 두 번째 파라미터에는 해당 리듀서의 기본값을 넣어 준다. 이 Hook을 사용하면 state 값과 dispatch 함수를 받아 오는데, state는 현재 가리키고 있는 상태고, dispatch는 액션을 발생시키는 함수이다.useReducer를 사용했을 때의 가장 큰 장점은 컴포넌트 업데이트 로직을 컴포넌트 바깥으로 빼낼 수 있다는 것이다.useReducer를 통한 input 관리useEffect에서 사용한 Info 컴포넌트의 input을 useReducer를 통해 관리할 수 있다.import React, { useReducer } from 'react';function reducer(state, action) { return { ...state, [action.name]: action.value };}const Info = () =&gt; { const [state, dispatch] = useReducer(reducer, { name: '', nickname: '' }); const { name, nickname } = state; const onChange = e =&gt; { dispatch(e.target); // e.target.name, e.target.value를 사용하므로 e.target을 넘김 }; return ( &lt;div&gt; &lt;div&gt; &lt;input name=\"name\" value={name} onChange={onChange} /&gt; &lt;input name=\"nickname\" value={nickname} onChange={onChange} /&gt; &lt;/div&gt; &lt;div&gt; &lt;div&gt; &lt;b&gt;이름:&lt;/b&gt; {name} &lt;/div&gt; &lt;div&gt; &lt;b&gt;닉네임:&lt;/b&gt; {nickname} &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; );};export default Info;useReducer에서의 액션은 어떤 값도 사용 가능하다. 그래서 이벤트 객체가 지니고 있는 e.target 값 자체를 액션 값으로 사용하여 구현하였다.useMemouseMemo를 사용하면 함수형 컴포넌트 내부에서 발생하는 연산을 최적화할 수 있다. 렌더링하는 과정에서 특정 값이 바뀌었을 때만 연산을 실행하고 원하는 값이 바뀌지 않았다면 이전에 연산했던 결과를 다시 사용할 수 있다.리스트에 숫자를 추가하면 추가된 숫자들의 평균을 보여 주는 함수형 컴포넌트 예시이다.import React, { useState } from 'react';const getAverage = numbers =&gt; { console.log('평균값 계산 중..'); if (numbers.length === 0) return 0; const sum = numbers.reduce((a, b) =&gt; a + b); return sum / numbers.length;};const Average = () =&gt; { const [list, setList] = useState([]); const [number, setNumber] = useState(''); const onChange = e =&gt; { setNumber(e.target.value); }; const onInsert = e =&gt; { const nextList = list.concat(parseInt(number)); setList(nextList); setNumber(''); }; return ( &lt;div&gt; &lt;input value={number} onChange={onChange} /&gt; &lt;button onClick={onInsert}&gt;등록&lt;/button&gt; &lt;ul&gt; {list.map((value, index) =&gt; ( &lt;li key={index}&gt;{value}&lt;/li&gt; ))} &lt;/ul&gt; &lt;div&gt; &lt;b&gt;평균값:&lt;/b&gt; {getAverage(list)} &lt;/div&gt; &lt;/div&gt; );};export default Average;위 코드는 숫자를 등록할 때뿐만 아니라 input 내용이 수정될 때도 getAverage 함수가 호출된다.import React, { useState } from 'react';const getAverage = numbers =&gt; { console.log('평균값 계산 중..'); if (numbers.length === 0) return 0; const sum = numbers.reduce((a, b) =&gt; a + b); return sum / numbers.length;};const Average = () =&gt; { const [list, setList] = useState([]); const [number, setNumber] = useState(''); const onChange = e =&gt; { setNumber(e.target.value); }; const onInsert = e =&gt; { const nextList = list.concat(parseInt(number)); setList(nextList); setNumber(''); }; const avg = useMemo(() =&gt; getAverage(list), [list]); // list 배열의 내용이 바뀔 때만 getAverage(list) 함수 호출 return ( &lt;div&gt; &lt;input value={number} onChange={onChange} /&gt; &lt;button onClick={onInsert}&gt;등록&lt;/button&gt; &lt;ul&gt; {list.map((value, index) =&gt; ( &lt;li key={index}&gt;{value}&lt;/li&gt; ))} &lt;/ul&gt; &lt;div&gt; &lt;b&gt;평균값:&lt;/b&gt; {avg} &lt;/div&gt; &lt;/div&gt; );};export default Average;useCallbackuseCallback은 useMemo와 비슷한 함수이다. 주로 렌더링 성능을 최적화해야 하는 상황에서 사용하는데, 이 Hook을 사용하면 이벤트 핸들러 함수를 필요할 때만 생성할 수 있다. Average 컴포넌트에서 onChange와 onInsert 함수는 컴포넌트가 리렌더링될 때마다 생성된다. 해당 부분을 useCallback을 사용하여 최적화 한 예시이다.// 컴포넌트가 처음 렌더링될 때만 함수 생성const onChnage = useCallback(e =&gt; { setNumber(e.target.value);}, []);// number 혹은 list가 바뀌었을 때만 함수 생성const onInsert = useCallback(() =&gt; { const nextList = list.concat(parseInt(number)); setList(nextList); setNumber('');}, [number, list]);useCallback의 첫 번째 파라미터에는 생성하고 싶은 함수를 넣고, 두 번째 파라미터에는 어떤 값이 바뀌었을 때 함수를 새로 생성해야 할지 명시할 배열을 넣으면 된다.함수 내부에서 상태 값에 의존해야 할 때는 그 값을 반드시 두 번째 파라미터 안에 포함시켜 주어야 한다. onChange의 경우 기존 값을 조회하지 않고 설정만 하기 떄문에 배열이 비어 있어도 상관없지만, onInsert는 기존의 number와 list를 조회해서 nextList를 생성하기 때문에 배열 안에 number와 list를 꼭 넣어 주어야 한다.useMemo((...)=&gt;fn, deps) === useCallback(fn, deps)위 코드에서 fn은 함수, deps는 dependency(deps에 의존)이다. 두 코드는 같은 코드인데, useCallback은 useMemo로 함수를 반환하는 상황에서 더 편하게 사용할 수 있는 Hook이라고 할 수 있다.숫자, 문자열, 객체처럼 일반 값을 재사용하려면 useMemo를, 함수를 재사용하려면 useCallback을 사용하면 된다.useRefuseRef는 함수형 컴포넌트에서 ref를 쉽게 사용할 수 있도록 해 준다. Average 컴포넌트에서 등록 버튼을 눌렀을 때 포커스가 input으로 넘어가는 예시 코드이다.import React, { useState } from 'react';const getAverage = numbers =&gt; { console.log('평균값 계산 중..'); if (numbers.length === 0) return 0; const sum = numbers.reduce((a, b) =&gt; a + b); return sum / numbers.length;};const Average = () =&gt; { const [list, setList] = useState([]); const [number, setNumber] = useState(''); const inputEl = useRef(null)l // 컴포넌트가 처음 렌더링될 때만 함수 생성 const onChnage = useCallback(e =&gt; { setNumber(e.target.value); }, []); // number 혹은 list가 바뀌었을 때만 함수 생성 const onInsert = useCallback(() =&gt; { const nextList = list.concat(parseInt(number)); setList(nextList); setNumber(''); inputEl.current.focus(); }, [number, list]); const avg = useMemo(() =&gt; getAverage(list), [list]); // list 배열의 내용이 바뀔 때만 getAverage(list) 함수 호출 return ( &lt;div&gt; &lt;input value={number} onChange={onChange} ref={inputEl} /&gt; &lt;button onClick={onInsert}&gt;등록&lt;/button&gt; &lt;ul&gt; {list.map((value, index) =&gt; ( &lt;li key={index}&gt;{value}&lt;/li&gt; ))} &lt;/ul&gt; &lt;div&gt; &lt;b&gt;평균값:&lt;/b&gt; {avg} &lt;/div&gt; &lt;/div&gt; );};export default Average;커스텀 Hooks 만들기Hook을 사용자가 직접 만들 수도 있다.Info 컴포넌트에서 여러 개의 input을 관리하기 위해 useReducer로 작성했던 로직을 useInputs라는 Hook으로 만든 예시이다.import { useReducer } from 'react;function reducer(state, action) { return { ...state, [action.name]: action.value };}export default function useInputs(initialForm) { const [state, dispatch] = useReducer(reducer, initialForm); const onChange = e =&gt; { dispatch(e.target); }; return [state, onChange];}사용하고자 하는 컴포넌트에서는 useReducer대신 useInputs로 작성하면 되고, import useInputs from './useInputs';로 import하면 된다." }, { "title": "컴포넌트의 라이프사이클 메서드", "url": "/posts/%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4-%EB%A9%94%EC%84%9C%EB%93%9C/", "categories": "Front-end, React, 리액트를 다루는 기술", "tags": "컴포넌트, 라이프사이클", "date": "2022-04-12 00:40:44 +0900", "snippet": "모든 리액트 컴포넌트는 라이프사이클(수명 주기)이 존재한다. 컴포넌트의 수명은 페이지에 렌더링되기 전 준비 과정에서 시작하여 페이지에서 사라질 때 끝난다.리액트 프로젝트에서 컴포넌트를 처음으로 렌더링할 때 어떤 작업을 처리해야 하거나 컴포넌트를 업데이트하기 전후로 어떤 작업을 처리해야 할 수도 있고, 불필요한 업데이트를 방지해야 할 수도 있다. 이러한 상황에 컴포넌트의 라이프사이클 메서드를 사용한다. 라이프사이클 메서드는 클래스형 컴포넌트에서만 사용할 수 있고 함수형 컴포넌트에서는 Hooks 기능을 사용하여 비슷한 작업을 처리한다.라이프사이클 메서드의 이해라이프사이클 메서드의 종류는 총 아홉 가지이다. Will 접두사가 붙은 메서드는 작업을 작동하기 전에 실행되는 메서드이고, Did 접두사가 붙은 메서드는 작업을 작동한 후에 실행되는 메서드이다.라이프사이클은 총 세 가지 카테고리인 마운트, 업데이트, 언마운트로 나뉜다.마운트DOM이 생성되고 웹 브라우저상에 나타나는 것을 마운트라고 한다. 이때 호출하는 메서드는 다음과 같다. 컴포넌트 만들기 constructor getDerivedStateFromProps render componentDidMount업데이트컴포넌트는 총 네 가지 경우에 업데이트를 한다. props가 바뀔 때 state가 바뀔 때 부모 컴포넌트가 리렌더링될 때 this.forceUpdate로 강제로 렌더링을 트리거할 때이렇게 컴포넌트를 업데이트할 때는 다음 메서드를 호출한다. 업데이트를 발생시키는 요인 (위의 네 가지 경우 중 3번까지) getDerivedStateFromProps shouldComponentUpdate (true 반환 시 render 호출, false 반환 시 여기서 작업 취소) render (forceUpdate의 경우 여기부터) getSnapshotBeforeUpdate (웹 브라우저상의 실제 DOM 변화) componentDidUpdate언마운트마운트의 반대 과정, 컴포넌트를 DOM에서 제거하는 것을 언마운트라고 한다. 언마운트하기 componentWillUnmount라이프사이클 메서드 살펴보기render() 함수render() { ... }컴포넌트의 모양새를 정의하며, 라이프사이클 메서드 중 유일한 필수 메서드이다. 이 메서드 안에서는 이벤트 설정이 아닌 곳에서 setState를 사용하면 안 되며, 브라우저의 DOM에 접근해서도 안 된다. DOM 정보를 가져오거나 state에 변화를 줄 때는 componentDidMount에서 처리해야 한다.constructor 메서드constructor(props) { ... }컴포넌트의 생성자 메서드로 컴포넌트를 만들 때 처음으로 실행된다. 이 메서드에서 초기 state를 정할 수 있다.getDerivedStateFromProps 메서드static getDerivedSTateFromProps(nextProps, prevState) { if (nextProps.value !== prevState.value) { // 조건에 따라 특정 값 동기화 return { value: nextProps.value }; } return null; // state를 변경할 필요가 없다면 null을 반환}리액트 v16.3 이후에 새로 만든 라이프사이클 메서드로, props로부터 받아 온 값을 state에 동기화시키는 용도로 사용하며 컴포넌트가 마운트될 때와 업데이트될 때 호출된다.componentDidMount 메서드componentDidMount() { ... }컴포넌트를 만들고 첫 렌더링을 다 마친 후 실행한다. 이 안에서 다른 자바스크립트 라이브러리 또는 프레임워크의 함수를 호출하거나 이벤트 등록, setTimeout, setInterval, 네트워크 요청 같은 비동기 작업을 처리하면 된다.shouldComponentUpdate 메서드shouldComponentUpdate(nextProps, nextState) { ... }props 또는 state를 변경했을 때, 리렌더링을 시작할지 여부를 지정하는 메서드이다. 이 메서드에서는 반드시 true, false 값을 반환해야 한다. 메서드를 따로 생성하지 않으면 기본적으로 true를 반환한다.getSnapshotBeforeUpdate 메서드getSnapshopBeforeUpdate(prevProps, prevState) { if (prevState.array !== this.state.array) { const { scrollTop, scrollHeight } = this.list; return { scrollTop, scrollHeight }; }}리액트 v16.3 이후에 만든 메서드이다. render에서 만들어진 결과물이 브라우저에 실제로 반영되기 직전에 호출된다. 이 메서드에서 반환하는 값은 componentDidUpdate에서 세 번째 파라미터인 snapshot 값으로 전달받을 수 있는데, 주로 업데이트하기 직전의 값을 참고할 일이 있을 때 활용된다. (e.g. 스크롤바 위치 유지)componentDidUpdate 메서드componentDidUpdate(prevProps, prevState, snapshot) { ... }리렌더링을 완료한 후 실행한다. 업데이트가 끝난 직후이므로 DOM 관련 처리를 해도 무방하다. prevProps 또는 prevState를 사용하여 컴포넌트가 이전에 가졌던 데이터에 접근할 수 있다. 또 getSnapshotBeforeUpdated에서 반환한 값이 있다면 여기서 snapshot 값을 전달받을 수 있다.componentWillUnmount 메서드componentWillUnmount() { ... }컴포넌트를 DOM에서 제거할 때 실행한다. componentDidMount에서 등록한 이벤트, 타이머, 직접 실행한 DOM이 있다면 여기서 제거 작업을 해야한다.componentDidCatch 메서드componentDidCatch(error, info) { this.setState({ error: true }); console.log({ error, info });}리액트 v16에서 도입된 메서드로, 컴포넌트 렌더링 도중에 에러가 발생했을 때 애플리케이션이 먹통이 되지 않고 UI를 보여 줄 수 있게 해 준다. error는 파라미터에 어떤 에러가 발생했는지 알려 주며, info 파라미터는 어디에 있는 코드에서 오류가 발생했는지에 대한 정보를 준다. 이 메서드를 사용할 때는 컴포넌트 자신에게 발생하는 에러를 잡아낼 수 없고 자신의 this.props.children으로 전달되는 컴포넌트에서 발생하는 에러만 잡아낼 수 있다.라이프사이클 메서드 예시import React, { Component } from 'react';class LifeCycleSample extends Component { state = { number: 0, color: null } myRef = null; // ref를 설정할 부분 constructor(props) { super(props); console.log('constructor'); } // 부모에게서 받은 color 값을 state에 동기화 static getDerivedStateFromProps(nextProps, prevState) { console.log('getDerivedStateFromProps'); if (nextProps.color !== prevState.color) { return { color: nextProps.color }; } return null; } componentDidMount() { console.log('componentDidMount'); } // 숫자의 마지막 자리가 4면 리렌더링 취소 shouldComponentUpdate(nextProps, nextState) { console.log('shouldComponentUpdate', nextProps, nextState); return nextState.number % 10 !== 4; } componentWillUnmount() { console.log('componentWillUnmount'); } handleClick = () =&gt; { this.setState({ number: this.state.number + 1 }); } // DOM에 변화가 일어나기 직전의 색상 속성을 snapshot 값으로 반환하여 componentDidUpdate에서 조회할 수 있게 함 getSnapshotBeforeUpdate(prevProps, prevState) { console.log('getSnapshotBeforeUpdate'); if (prevProps.color !== this.props.color) { return this.myRef.style.color; } return null; } componentDidUpdate(prevProps, prevState, snapshot) { console.log('componentDidUpdate', prevProps, prevState); if (snapshot) { console.log('업데이트되기 직전 색상 : ', snapshot); } } render() { console.log('render'); const style = { color: this.props.color }; return ( &lt;div&gt; &lt;h1 style={style} ref={ref =&gt; this.myRef=ref}&gt; {this.state.number} &lt;/h1&gt; &lt;p&gt;color: {this.state.color}&lt;/p&gt; &lt;button onClick={this.handleClick}&gt; 더하기 &lt;/button&gt; &lt;/div&gt; ) }}export default LifeCycleSample;import React, { Component } from 'react';import LifeCycleSample from './LifeCycleSample';// 랜덤 색상 생성function getRandomColor() { return '#' + Math.floor(Math.random() * 16777215).toString(16); // 16777215를 hex로 표현하면 ffffff}class App extends Component { state = { color: '#000000' } handleClick = () =&gt; { this.setState({ color: getRandomColor() }); } render() { return ( &lt;div&gt; &lt;button onClick={this.handleClick}&gt;랜덤 색상&lt;/button&gt; &lt;LifeCycleSample color={this.state.color}/&gt; &lt;/div&gt; ); }}export default App;크롬의 개발자 도구에서 라이프사이클 메서드가 실행되는 것을 확인할 수 있다.에러 잡아내기render 함수에서의 에러는 주로 존재하지 않는 함수를 사용하려고 하거나, 존재하지 않는 객체의 값을 조회하려고 할 때 발생한다.render() { console.log('render'); const style = { color: this.props.color }; return ( &lt;div&gt; {this.props.missing.value} {/* 존재하지 않는 props인 missing 객체의 value 조회 */} &lt;h1 style={style} ref={ref =&gt; this.myRef=ref}&gt; {this.state.number} &lt;/h1&gt; &lt;p&gt;color: {this.state.color}&lt;/p&gt; &lt;button onClick={this.handleClick}&gt; 더하기 &lt;/button&gt; &lt;/div&gt; );}위 코드에서 에러가 발생하게 되면 흰색 화면에 아무것도 출력되지 않는다. 에러를 잡아 주는 ErrorBoundary 컴포넌트를 생성하여 에러 발생을 인지시켜 준다.import React, { Component } from 'react';class ErrorBoundary extends Component { state = { error: false }; componentDidCatch(error, info) { this.setState({ error: true }); console.log({ error, info }); } render() { if (this.state.error) return &lt;div&gt;에러가 발생했습니다!&lt;/div&gt;; return this.props.children; }}export default ErrorBoundary;이 컴포넌트를 사용하여 App.js에서 LifeCycleSample 컴포넌트를 감싸 준다.import React, { Component } from 'react';import LifeCycleSample from './LifeCycleSample';import ErrorBoundary from './ErrorBoundary';// 랜덤 색상 생성function getRandomColor() { return '#' + Math.floor(Math.random() * 16777215).toString(16); // 16777215를 hex로 표현하면 ffffff}class App extends Component { state = { color: '#000000' } handleClick = () =&gt; { this.setState({ color: getRandomColor() }); } render() { return ( &lt;div&gt; &lt;button onClick={this.handleClick}&gt;랜덤 색상&lt;/button&gt; &lt;ErrorBoundary&gt; &lt;LifeCycleSample color={this.state.color}/&gt; &lt;/ErrorBoundary&gt; &lt;/div&gt; ); }}export default App;" }, { "title": "컴포넌트 반복", "url": "/posts/%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%B0%98%EB%B3%B5/", "categories": "Front-end, React, 리액트를 다루는 기술", "tags": "컴포넌트", "date": "2022-04-11 20:18:01 +0900", "snippet": "자바스크립트 배열의 map() 함수자바스크립트 배열 객체의 내장 함수인 map 함수를 사용하여 반복되는 컴포넌트를 렌더링할 수 있다. map 함수는 파라미터로 전달된 함수를 사용하여 배열 내 각 요소를 원하는 규칙에 따라 변환한 후 결과를 새로운 배열로 생성한다.arr.map(callback, [thisArg])파라미터는 다음과 같다. callback : 새로운 배열의 요소를 생성하는 함수로 파라미터는 다음 세 가지이다. currentValue : 현재 처리하고 있는 요소 index : 현재 처리하고 있는 요소의 index 값 array : 현재 처리하고 있는 원본 배열 thisArg(선택 항목) : callback 함수 내부에서 사용할 this 레퍼런스사용 예시는 다음과 같다.const numbers = [1, 2, 3, 4, 5];const result = numbers.map(num =&gt; num * num);console.log(result); // [1, 4, 9, 16, 25]데이터 배열을 컴포넌트 배열로 변환하기기존 배열로 컴포넌트로 구성된 배열을 생성할 수도 있다.import React from 'react';const IterationSample = () =&gt; { const names = ['눈사람', '얼음', '눈', '바람']; const nameList = names.map(name =&gt; &lt;li&gt;{name}&lt;/li&gt;); return &lt;ul&gt;{nameList}&lt;/ul&gt;;};export default IterationSample;위 코드는 렌더링이 문제없이 되지만 크롬 개발자 도구의 콘솔을 열어보면 key가 없다는 경고 메시지가 출력된다.key리액트에서 key는 컴포넌트 배열을 렌더링했을 때 어떤 원소에 변동이 있었는지 알아내려고 사용한다. key가 없으면 Virtual DOM을 비교하는 과정에서 리스트를 순차적으로 비교하면서 변화를 감지한다. 하지만 key가 있다면 값을 사용하여 어떤 변화가 일어났는지 더욱 빠르게 알 수 있다.key값은 유일해야 한다. 따라서 데이터가 가진 고윳값을 key 값으로 설정해야 한다. ex) 게시물 번호map함수에 전달되는 콜백 함수의 인수인 index 값을 사용하면 된다.import React from 'react';const IterationSample = () =&gt; { const names = ['눈사람', '얼음', '눈', '바람']; const nameList = names.map((name, index) =&gt; &lt;li key={index}&gt;{name}&lt;/li&gt;); return &lt;ul&gt;{nameList}&lt;/ul&gt;;};export default IterationSample;응용위 방법들을 응용하여 동적인 배열을 렌더링하는 예시 코드이다.import React from 'react';const IterationSample = () =&gt; { const [names, setNames] = useState([ { id: 1, text: '눈사람' }, { id: 2, text: '얼음' }, { id: 3, text: '눈' }, { id: 4, text: '바람' } ]); const [inputText, setInputText] = useState(''); const [nextId, setNextId] = useState(5); // 새로운 항목을 추가할 때 사용할 id const onChange = e =&gt; setInputText(e.target.value); const onClick = () =&gt; { const nextNames = names.concat({ id: nextId, text: inputText }); setNextId(nextId + 1); setNames(nextNames); setInputText(''); }; // 배열에서 id가 일치하지 않는 값을 찾는 filter const onRemove = id =&gt; { const nextNames = names.filter(name =&gt; name.id !== id); setNames(nextNames); }; // li를 더블클릭하면 제거 const namesList = names.map(name =&gt; ( &lt;li key={name.id} onDoubleClick={() =&gt; onRemove(name.id)}&gt; {name.text} &lt;/li&gt; )); return ( &lt;&gt; {/* Fragment */} &lt;input value={inputText} onChange={onChange} /&gt; &lt;button onClick={onClick}&gt;추가&lt;/button&gt; &lt;ul&gt;{namesList}&lt;/ul&gt; &lt;/&gt; )};export default IterationSample;" }, { "title": "이벤트 핸들링", "url": "/posts/%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%95%B8%EB%93%A4%EB%A7%81/", "categories": "Front-end, React, 리액트를 다루는 기술", "tags": "이벤트 핸들링", "date": "2022-04-08 17:37:12 +0900", "snippet": "이벤트 핸들링사용자가 웹 브라우저에서 DOM 요소들과 상호 작용하는 것을 이벤트라고 한다.이벤트 사용에 주의할 점 이벤트 이름은 카멜 표기법으로 작성한다.HTML의 onclick은 리액트에서 onClick으로 onkeyup은 onKeyUp으로 작성해야 한다. 이벤트에서 실행할 자바스크립트 코드를 전달하는 것이 아니라 함수 형태의 값을 전달한다.HTML에서 이벤트를 설정할 때는 큰따옴표 안에 실행할 코드를 넣었지만 리액트에서는 함수 형태의 객체를 전달한다. DOM 요소에만 이벤트를 설정할 수 있다.div, button, input, form, span 등의 DOM 요소에는 이벤트를 설정할 수 있지만, 직접 만든 컴포넌트에는 이벤트를 자체적으로 설정할 수 없다. 만약 &lt;MyComponent onClick={doSonething}/&gt; 다음과 같이 설정한다면 이름이 onClick인 props를 MyComponent에 전달하게 되는 것이다. 이벤트로 설정하고 싶다면 &lt;div onClick={this.props.onClick}&gt; 다음과 같이 전달받은 props를 컴포넌트 내부 DOM 이벤트로 설정하면 된다.클래스형 컴포넌트에서의 이벤트 핸들링클래스형 컴포넌트의 이벤트 핸들링 코드 예시이다.import React, { Component } from 'react';class EventPractice extends Component { state = { username: '', message: '' } // input에 입력되는 결과 state에 등록 handleChange = (e) =&gt; { this.setState({ // message: e.target.value // 이와 같은 방식은 input이 여러 개가 되면 동일한 함수로 처리할 수 없다. [e.target.name]: e.target.value // 객체 안에서 key를 [ ]로 감싸면 그 안에 넣은 레퍼런스가 가리키는 실제 값이 key 값으로 사용된다. }); } // 버튼 클릭 시 username과 message 출력 후 초기화 handleClick = () =&gt; { alert(this.state.username + ': ' + this.state.message); this.setState({ username: '', message: '' }); } // 엔터 키 입력에 따른 동작 handleKeyPress = (e) =&gt; { if(e.key === 'Enter') { this.handleClick(); } } render() { return ( &lt;div&gt; &lt;h1&gt;이벤트 연습&lt;/h1&gt; &lt;input type=\"text\" name=\"username\" // handleChange에서 e.target.name 부분에 해당하므로 state와 key 값을 동일하게 설정해야 한다. placeholder=\"사용자명\" value={this.state.username} onChange={this.handleChange} // 입력되는 값이 변할때마다 적용 /&gt; &lt;input type=\"text\" name=\"message\" placeholder=\"아무거나 입력해 보세요\" value={this.state.message} onChange={this.handleChange} onKeyPress={this.handleKeyPress} /&gt; &lt;button onClick={this.handleClick}&gt;확인&lt;/button&gt; &lt;/div&gt; ); }}export default EventPractice;handleChange에서 e는 SyntheticEvent로 웹 브라우저의 네이티브 이벤트를 감싸는 객체이다. 네이티브 이벤트와 인터페이스가 같으므로 순수 자바스크립트에서 HTML 이벤트를 다룰 때와 똑같이 사용하면 된다.이벤트 사용에 주의할 점에서 ‘이벤트에 실행할 자바스크립트 코드르르 전달하는 것이 아니라 함수형태의 값을 전달한다’고 했다. 그래서 이벤트를 처리할 때 다음과 같이 렌더링을 하는 동시에 함수를 만들어서 전달해 주어야 한다.constructor(props) { super(props); this.handleChange = this.handleChange.bind(this); this.handleClick = this.handleClick.bind(this);}함수가 호출될 때 this는 호출부에 따라 결정되므로, 클래스의 임의 메서드가 특정 HTML 요소의 이벤트로 등록되는 과정에서 메서드와 this의 관계가 끊어져 버린다. 그래서 임의 메서드가 이벤트로 등록되어도 this를 컴포넌트 자신으로 제대로 가리키기 위해서 메서드를 this와 바인딩하는 작업이 필요하다. 바인딩을 하지 않을 경우 this가 undefined를 가리키게 된다.이러한 작업을 줄이는 방법은 바벨의 transform-class-properties 문법을 사용하여 화살표 함수 형태로 메서드를 정의하는 것이다. 상단의 예시코드에 적용되어 있다. (일반 화살표 함수와 다를 것 없어 보인다.)함수형 컴포넌트에서의 이벤트 핸들링클래스형 컴포넌트에서 작성한 예시 코드를 함수형 컴포넌트 형태로 작성한 예시이다.import React, { useState } from 'react';const EventPractice = () =&gt; { const [username, setUserName] = useState(''); const [message, setMessage] = useState(''); const onChangeUsername = e =&gt; setUsername(e.target.value); const onChangeMessage = e =&gt; setMessage(e.target.value); const onClick = () =&gt; { alert(username + ': ' + message); setUsername(''); setMessage(''); }; const onKeyPress = e =&gt; { if (e.key === 'Enter') { onClick(); } }; return ( &lt;div&gt; &lt;h1&gt;이벤트 연습&lt;/h1&gt; &lt;input type=\"text\" name=\"username\" placeholder=\"사용자명\" value={username} onChange={onChangeUsername} /&gt; &lt;input type=\"text\" name=\"message\" placeholder=\"아무거나 입력해 보세요\" value={message} onChange={onChangeMessage} onKeyPress={onKeyPress} /&gt; &lt;button onClick={onClick}&gt;확인&lt;/button&gt; &lt;/div&gt; );};export default EventPractice;위 예시 코드에서는 e.target.name을 사용하지 않고 함수 두 개를 따로 만들었다. input이 두 개밖에 없다면 괜찮지만 많아진다면 다음과 같이 수정하는 것이 좋다.const [form, setForm] = useState({ username: '', message: ''});const { username, message } = form;const onChange = e =&gt; { const nextForm = { ...form, [e.target.name]: e.target.value }; setForm(nextForm);};const onClick = () =&gt; { alert(username + ': ' + message); setForm({ username: '', message: '' })};" }, { "title": "state", "url": "/posts/state/", "categories": "Front-end, React, 리액트를 다루는 기술", "tags": "state", "date": "2022-04-07 00:05:34 +0900", "snippet": "stateprops는 컴포넌트가 사용되는 과정에서 부모 컴포넌트가 설정하는 값이며, 컴포넌트 자신은 해당 props를 읽기 전용으로만 사용할 수 있고 props를 바꾸려면 부모 컴포넌트에서 바꾸어 주어야 한다. 컴포넌트 내부에서 바뀔 수 있는 값은 state라고 한다.리액트에는 두 가지 종류의 state가 있다. 하나는 클래스형 컴포넌트가 지니고 있는 state이고, 다른 하나는 함수형 컴포넌트에서 useState라는 함수를 통해 사용하는 state이다.클래스형 컴포넌트의 state클래스형 컴포넌트에서 state를 사용하는 예시이다.import React, { Component } from 'react';class Counter extends Component { constructor(props) { super(props); // state의 초깃값 설정 this.state = { number: 0, fixedNumber: 0 }; } render() { const { number, fixedNumber } = this.state; // state를 조회할 때는 ths.state로 조회 return ( &lt;div&gt; &lt;h1&gt;{number}&lt;/h1&gt; &lt;h2&gt;바뀌지 않는 값: {fixedNumber}&lt;/h2&gt; &lt;button // onClick을 통해 버튼이 클릭되었을 때 호출할 함수 지정 onClick={() =&gt; { // this.setState를 사용하여 state에 새로운 값을 넣을 수 있음 this.setState({ number: number + 1}); }} &gt; +1 &lt;/button&gt; &lt;/div&gt; ); }}export default Counter;위 파일의 각 코드가 어떤 역할을 하는지 알아보자.컴포넌트에서 state를 설정할 때는 constructor 메서드를 작성하여 설정하였다. 이는 컴포넌트의 생성자 메서드인데 반드시 super(props)를 호출해 주어야 한다. 이 함수가 호출되면 현재 클래스형 컴포넌트가 상속하고 있는 리액트의 Component 클래스가 지닌 생성자 함수를 호출해 준다.state의 초깃값을 지정하는데 꼭 constructor 메서드를 선언하지 않아도 된다.class Counter extends Component { state = { number: 0, fixedNumber: 0 }; render() { const { number, fixedNumber } = this.state; ... }}(책에 해당 부분에 대한 추가적인 언급은 없었고, 인터넷에서 찾아본 것은 constructor를 선언하지 않는 위의 방식이 최근 React에서 제공된 방식이라고 한다.)이후 this.state값에 초깃값을 설정한다. 컴포넌트의 state는 객체 형식이어야 한다.render 함수에서 현재 state를 조회할 때는 this.state를 조회하면 된다.button 안에 onClick이라는 값을 props로 넣어 주었는데, 이는 버튼이 클릭될 때 호출시킬 함수를 설정할 수 있게 해준다. 이를 이벤트 설정이라고 한다.이벤트로 설정할 함수를 넣어 줄 때는 화살표 함수 문법을 사용하여 넣어 주어야 한다. 함수 내부의 this.setState라는 함수를 사용하였는데 이 함수가 state값을 바꿀 수 있게 해 준다.this.setState에 객체 대신 함수 인자 전달this.setState를 사용하여 state값을 업데이트할 때는 상태가 비동기적으로 업데이트된다.onClick={() =&gt; { this.setState({number: number+1}); this.setState({number: this.state.number+1});}}위와 같이 this.setState를 두 번 호출하더라도 버튼을 클릭할 때 숫자가 1씩 더해진다. this.setState를 사용한다고 해서 state값이 바로 바뀌지는 않기 때문이다.이에 대한 해결책은 this.setState를 사용할 때 객체 대신 함수를 인자로 넣어 주는 것이다.this.setState((prevState, props) =&gt; { return { // 업데이트하고 싶은 내용 }})위 코드에서 prevState는 기존 상태이고, props는 현재 지니고 있는 props를 가리킨다. 업데이트하는 과정에서 props가 필요하지 않다면 생략해도 된다.기존 코드에 다음과 같이 적용할 수 있다.&lt;button onClick={() =&gt; { this.setState(prevState =&gt; { return { number: prevState.number + 1 }; }); // 위 코드와 아래 코드는 완전히 똑같은 기능을 함 // 아래 코드는 함수에서 바로 객체를 반환한다는 의미 this.setState(prevState =&gt; ({ number: prevState.number + 1 })); }}&gt; +1&lt;/button&gt;위 코드를 적용하면 버튼 클릭 시 값이 2씩 증가하게 된다.this.setState가 끝난 후 특정 작업 실행setState를 사용하여 값을 업데이트하고 난 다음 특정 작업을 하고 싶을 때는 setState 두 번째 파라미터로 콜백 함수를 등록하여 처리할 수 있다.&lt;button onClick={() =&gt; { this.setState( { number: number + 1 }, () =&gt; { // console.log는 개발자 도구의 Console 탭에서 확인 가능 console.log('방금 setState가 호출되었습니다.'); console.log(this.state); } ) }}&gt;함수형 컴포넌트의 state리액트 16.8 이전 버전에서는 함수형 컴포넌트에서 state를 사용할 수 없었다. 하지만 16.8 이후부터는 useState라는 함수를 사용하여 함수형 컴포넌트에서도 state를 사용할 수 있게 되었다. 이 과정에서 Hooks라는 것을 사용하게 된다.배열 비구조화 할당Hooks를 사용하기 전 배열 비구조화 할당에 대해 알아야 한다. 배열 비구조화 할당은 이전에 배운 객체 비구조화 할당과 비슷하다. 즉, 배열 안에 들어 있는 값을 쉽게 추출할 수 있도록 해 주는 문법이다.const array = [1, 2];const one = array[0];const two = array[1];array 안에 있는 값을 one과 two에 담아 주는 코드이다. 위 코드를 배열 비구조화 할당을 사용하여 다음과 같이 표현할 수 있다.const array = [1, 2];const [one, two] = array;useState 사용하기배열 비구조화 할당 문법을 알고 나면 useState 사용 방법을 쉽게 이해할 수 있다.import React, { useState } from 'react';const Say = () =&gt; { const [message, setMessage] = useState(''); const onClickEnter = () =&gt; setMessage('안녕하세요!'); const onClickLeave = () =&gt; setMessage('안녕히 가세요!'); return ( &lt;div&gt; &lt;button onClick={onClickEnter}&gt;입장&lt;/button&gt; &lt;button onClick={onClickLeave}&gt;퇴장&lt;/button&gt; &lt;h1&gt;{message}&lt;/h1&gt; &lt;/div&gt; );};export default Say;useState 함수의 인자에는 상태의 초깃값을 넣어 준다. 클래스형 컴포넌트에서의 state 초깃값은 객체 형태를 넣어 주어야 하지만 useState에서는 반드시 객체가 아닌 숫자, 문자열, 객체, 배열 자유로운 값의 형태를 지닐 수 있다.함수를 호출하면 배열이 반환되는데 배열의 첫 번째 원소는 현재 상태, 두 번째 원소는 상태를 바꾸어 주는 Setter 함수이다.useState는 여러 번 사용할 수도 있다.const [message, setMessage] = useState('');const [color, setColor] = useState('black');위의 코드에서 color는 black을 기본값으로 가지게 된다.배열과 객체의 setStatestate의 값을 바꾸어야 할 때는 꼭 setState 혹은 useState를 통해 전달받은 Setter 함수를 사용해야 한다. 다음 코드는 잘못된 코드이다.// 클래스형 컴포넌트의 statethis.state.number = this.state.number + 1;this.state.array = this.array.push(2);this.state.object.value = 5;// 힘수형 컴포넌트의 stateconst [object, setObject] = useState({a: 1, b: 1});object.b = 2;배열이나 객체를 업데이트해야 할 때는 사본을 만들고 사본에 값을 업데이트한 후, 그 사본의 상태를 Setter함수를 통해 업데이트한다.// 객체const object = { a: 1, b: 2, c: 3 };const nextObject = { ...object, b: 2 }; // 사본을 만들어서 b 값만 덮어쓰기// 배열const array = [ { id: 1, value: true }, { id: 2, value: true }, { id: 3, value: false }];let nextArray = array.concat({ id: 4 }); // 새 항목 추가nextArray.filter(item =&gt; item.id !== 2); // id가 2인 항목 제거nextArray.map(item =&gt; (item.id === 1 ? { ...item, value: false } : item)); // id가 1인 항목의 value를 false로 설정객체에 대한 사본을 만들 때는 spread 연산자라 불리는 …을 사용하여 처리하고, 배열에 대한 사본을 만들 때는 배열의 내장 함수를 활용한다." }, { "title": "props", "url": "/posts/props/", "categories": "Front-end, React, 리액트를 다루는 기술", "tags": "props", "date": "2022-04-06 18:06:22 +0900", "snippet": "propsprops는 properties를 줄인 표현으로 컴포넌트 속성을 설정할 때 사용하는 요소이다. props 값은 해당 컴포넌트를 불러와 사용하는 부모 컴포넌트에서 설정할 수 있다.import React from 'react';const MyComponent = props =&gt; { return &lt;div&gt;안녕하세요. 제 이름은 {props.name}입니다.&lt;/div&gt;;};export default MyComponent;props 값은 부모 컴포넌트인 App 컴포넌트에서 지정한다.import React from 'react';import MyComponent from './MyComponent';const App = () =&gt; { return &lt;MyComponent name=\"React\" /&gt;;};export default App;defaultPropsApp 컴포넌트에서 MyComponent에 설정한 name을 부여하지 않았을 때 설정된 기본값이 지정되게 할 수 있다.import React from 'react';import MyComponent from './MyComponent';const App = () =&gt; { return &lt;MyComponent /&gt;;};export default App;import React from 'react';const MyComponent = props =&gt; { return &lt;div&gt;안녕하세요. 제 이름은 {props.name}입니다.&lt;/div&gt;;};MyComponent.defaultProps = { name: '기본 이름'};export default MyComponent;태그 사이의 내용을 보여 주는 children컴포넌트 태그 사이의 내용을보여 주는 props가 있는데 바로 children이다.import React from 'react';import MyComponent from './MyComponent';const App = () =&gt; { return &lt;MyComponent&gt;리액트&lt;/MyComponent&gt;;};export default App;위 코드에서 MyComponent 태그 사이에 작성한 리액트라는 문자열을 MyComponent 내부에서 보여주려면 props.children 값을 보여 주어야 한다.import React from 'react';const MyComponent = props =&gt; { return ( &lt;div&gt; 안녕하세요. 제 이름은 {props.name}입니다. &lt;br /&gt; children 값은 {props.children} 입니다. &lt;/div&gt; );};MyComponent.defaultProps = { name: '기본 이름'};export default MyComponent;비구조화 할당 문법을 통해 props 내부 값 추출하기MyComponent에서 props 값을 조회할 때마다 props.name과 같은 형식으로 조회한다. 이러한 작업을 더 편하게 하기 위해서는 ES6의 비구조화 할당 문법을 사용하여 내부 값을 바로 추출하는 방법이 있다.import React from 'react';const MyComponent = props =&gt; { const { name, children } = props; return ( &lt;div&gt; 안녕하세요. 제 이름은 {name}입니다. &lt;br /&gt; children 값은 {children} 입니다. &lt;/div&gt; );};MyComponent.defaultProps = { name: '기본 이름'};export default MyComponent;이렇게 작성하면 더 짧은 코드로 작성할 수 있다.위와 같이 객체에서 값을 추출하는 문법을 비구조화 할당(destructuring assignment) 혹은 구조 분해 문법이라고 부른다.위의 방법 대신 함수의 파라미터 부분에서도 사용할 수 있는데, 만약 함수의 파라미터가 객체라면 그 값을 바로 비구조화해서 사용한다.import React from 'react';const MyComponent = ({ name, children }) =&gt; { return ( &lt;div&gt; 안녕하세요. 제 이름은 {name}입니다. &lt;br /&gt; children 값은 {children} 입니다. &lt;/div&gt; );};MyComponent.defaultProps = { name: '기본 이름'};export default MyComponent;propTypes를 통한 props 검증컴포넌트의 필수 props를 지정하거나 props의 타입을 지정할 때는 propTypes를 사용한다. PropTypes를 import하여 불러와 사용할 수 있다.import React from 'react';import PropTypes from 'prop-types';const MyComponent = ({ name, favoriteNumber, children }) =&gt; { return ( &lt;div&gt; 안녕하세요. 제 이름은 {name}입니다. &lt;br /&gt; children 값은 {children} 입니다. &lt;br /&gt; 제가 좋아하는 숫자는 {favoriteNumber}입니다. &lt;/div&gt; );};MyComponent.defaultProps = { name: '기본 이름'};MyComponent.propTypes = { name: PropTypes.string, favoriteNumber: PropTypes.number.isRequired}export default MyComponent;이렇게 설정해 주면 name값은 무조건 문자열 형태로 전달해야 되며, favoriteNumber는 숫자 형태로 필수로 지정해 주어야 한다.import React from 'react';import MyComponent from './MyComponent';const App = () =&gt; { return ( &lt;MyComponent name=\"react\" favoriteNumber={1}&gt; 리액트 &lt;/MyComponent&gt; );};export default App;그 외에 bool, array, func, object 등 다양한 PropTypes 종류가 있다.클래스형 컴포넌트에서 props 사용하기클래스형 컴포넌트에서 props를 사용할 때는 render 함수에서 this.props를 조회하면 된다.그리고 defaultProps와 propTypes는 똑같은 방식으로 설정하면 된다.import React from 'react';import PropTypes from 'prop-types';class MyComponent extends Component { render() { const { name, favoriteNumber, children } = this.props // 비구조화 할당 return ( &lt;div&gt; 안녕하세요. 제 이름은 {name}입니다. &lt;br /&gt; children 값은 {children} 입니다. &lt;br /&gt; 제가 좋아하는 숫자는 {favoriteNumber}입니다. &lt;/div&gt; ); }}MyComponent.defaultProps = { name: '기본 이름'};MyComponent.propTypes = { name: PropTypes.string, favoriteNumber: PropTypes.number.isRequired}export default MyComponent;" }, { "title": "컴포넌트", "url": "/posts/%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8/", "categories": "Front-end, React, 리액트를 다루는 기술", "tags": "컴포넌트", "date": "2022-04-06 18:04:38 +0900", "snippet": "컴포넌트CS(Computer Science)에서 컴포넌트란 ‘독립적인 기능을 수행하는 단위 모듈’을 의미한다. 반면에, 리액트에서의 컴포넌트는 ‘앱을 이루는 최소한의 단위’이다.리액트의 컴포넌트는 두 종류가 있다. 우선 함수형 컴포넌트를 보자.import React from 'react';import './App.css';function App() { const name = 'react'; return &lt;div className=\"react\"&gt;{name}&lt;/div&gt;;}export default App;클래스형 컴포넌트는 다음과 같이 작성된다.import React, { Component } from 'react';class App extends Component { render() { const name = 'react'; return &lt;div className=\"react\"&gt;{name}&lt;/div&gt;; }}export default App;해당 코드에서의 차이점은 선언을 function으로 하는가 class로 하는가, extends Component가 존재하는가, render가 존재하는가 정도로 보인다.함수형 컴포넌트의 장점은 클래스형 컴포넌트보다 선언하기 편하며 메모리 자원을 덜 사용하고 프로젝트를 빌드하여 배포할 때도 파일 크기가 더 작다(이 부분은 상대적인 것이며 사실상 큰 차이는 없다)단점은 state와 라이프사이클 API를 사용하지 못하는 점이다. 하지만, 리액트 v16.8 업데이트 이후 Hooks라는 기능이 도입되어 해결되어 클래스형 컴포넌트와 똑같이 사용할 수 잇는 것은 아니지만 다른 방식으로 비슷한 작업을 할 수 있게 되었다.리액트 공식 매뉴얼에서는 둘 중 함수형 컴포넌트와 Hooks의 사용을 권장하고 있다.화살표 함수ES6에서 function 키워드 대신 () =&gt; {}를 사용하여 함수를 생성하는 화살표 함수 문법이 도입되었다.import React from 'react';const MyComponent = () =&gt; { return &lt;div&gt;content&lt;/div&gt;;};export default MyComponent;이렇게 컴포넌트에도 화살표 함수를 사용할 수 있다.화살표 함수가 function을 이용한 선언 방식을 아예 대체하지는 않고 사용 용도가 다르다. 두 경우에 가리키고 있는 this 값이 다르다.functino BlackDog() { this.name = '흰둥이'; return { name: '검둥이', bark: function() { console.log(this.name); } }}const blackDog = new BlackDog();blackDog.bark(); // 검둥이functino WhiteDog() { this.name = '흰둥이'; return { name: '검둥이', bark: function() { console.log(this.name); } }}const whiteDog = new WhiteDog();whiteDog.bark(); // 흰둥이function을 사용했을 때는 검둥이가 나타나고, 화살표 함수를 사용했을 때는 흰둥이가 나타난다. 일반 함수는 자신이 종속된 객체를 this로 가리키며, 화살표 함수는 자신이 종속된 인스턴스를 가리킨다.화살표 함수는 값을 연산하여 바로 반환해야 할 때 사용하면 가독성을 높일 수 있다.function twice(value) { return value * 2;}const triple = (value) =&gt; value * 3;이렇게 { }를 열어 주지 않으면 연산한 값을 그대로 반환한다는 의미이다.모듈 내보내기 및 불러오기컴포넌트 코드에서 맨 아래 코드는 다음과 같이 작성되어 있다.export default MyComponent;이 코드는 다른 파일에서 이 파일을 import할 때, 위에 선언한 MyComponent 클래스를 불러오도록 설정한다.다른 컴포넌트에서 해당 컴포넌트를 불러와서 사용하고자 할 때는 다음과 같이 작성한다.import React from 'react';import MyComponent from './MyComponent';const App = () =&gt; { return &lt;MyComponent /&gt;;};export default App;" }, { "title": "jsx", "url": "/posts/jsx/", "categories": "Front-end, React, 리액트를 다루는 기술", "tags": "jsx", "date": "2022-04-03 02:09:04 +0900", "snippet": "JSXjsx란 자바스크립트의 확장 문법으로 XML과 비슷하게 생겼다. jsx로 작성된 코드는 코드가 번들링되는 과정에서 바벨을 사용하여 자바 스크립트 형태의 코드로 변환된다. 다음 예시를 보자.function App() { return ( &lt;div&gt; Hello &lt;b&gt;react&lt;/b&gt; &lt;/div&gt; );}function App() { return React.createElement(\"div\", null, \"Hello \", React.createElement(\"b\", null, \"react\"));}JSX 문법감싸인 요소컴포넌트에 여러 요소가 있다면 반드시 부모 요소 하나로 감싸야 한다.import React from 'react';function App() { return ( &lt;h1&gt;리액트 안녕!&lt;/h1&gt; &lt;h2&gt;잘 작동하니?&lt;/h2&gt; )}export default App;해당 코드에서 요소 여러 개가 부모 요소 하나에 의해 감싸져 있지 않기 때문에 오류가 발생한다.import React from 'react';function App() { return ( &lt;div&gt; &lt;h1&gt;리액트 안녕!&lt;/h1&gt; &lt;h2&gt;잘 작동하니?&lt;/h2&gt; &lt;/div&gt; )}export default App;리액트 컴포넌트에서 요소 여러 개를 하나의 요소로 감싸야하는 이유는 Virtual DOM에서 컴포넌트 변화를 감지해 낼 때 효율적으로 비교할 수 있도록 컴포넌트 내부는 하나의 DOM 트리 구조로 이루어져야 한다는 규칙 때문이다.자바스크립트 표현JSX 안에서 자바스크립트 표현은 { }로 표현된다.const name = '리액트';&lt;h1&gt;{name} 안녕!&lt;/h1&gt;ES6의 var과 let의 차이var 키워드는 scope(해당 값을 사용할 수 있는 코드 영역)가 함수 단위이다.function myFunction() { var a = \"hello\"; if(true) { var a = \"bye\"; console.log(a); // bye } console.log(a); // bye}하지만 let과 const의 scope는 함수 단위가 아닌 블록 단위이다.function myFunction() { let a = 1; if(true) { let a = 2; console.log(a); // 2 } console.log(a); // 1}let을 사용할 때 같은 블록 내부에서 중복 선언이 불가능하다.let a = 1;let a = 2;ES6 문법에서는 var을 사용할 일이 없다. 유동적으로 값이 변화해야 할때 let을 사용, 한번 설정한 후 변할 일이 없는 값에서는 const를 사용하면 된다.if 문 대신 조건부 연산자 (삼항연산자)JSX 내부 자바스크립트 표현식에서는 if문을 사용할 수 없다. 조건에 따라 다른 내용을 렌더링해야 할 때는 JSX 외부에서 if 문을 사용하여 사전에 값을 설정하거나, { } 안에 조건부 연산자를 사용하면 된다.const name = '리액트';return ( &lt;div&gt; {name === '리액트' ?( &lt;h1&gt;리액트입니다.&lt;/h1&gt; ) : ( &lt;h2&gt;리액트가 아닙니다.&lt;/h2&gt; )} &lt;/div&gt;)AND연산자(&amp;&amp;)를 사용한 조건부 렌더링조건부 연산자에서 특정 조건을 만족할 때 내용을 보여주고, 만족하지 않을 때 아무것도 렌더링하지 않도록 구현하려면 null을 사용하면 된다.const name = '뤼왝트';return &lt;div&gt;{name === '리액트' ? &lt;h1&gt;리액트입니다.&lt;/h1&gt; : null}&lt;/div&gt;;이렇게 null을 렌더링하면 아무것도 보여주지 않는다. 이러한 코드 대신 &amp;&amp; 연산자를 이용하여 조건부 렌더링을 할 수 있다.const name = '뤼왝트';return &lt;div&gt;{name === '리액트' &amp;&amp; &lt;h1&gt;리액트입니다.&lt;/h1&gt;}&lt;/div&gt;;undefined를 렌더링하지 않기렌더링하는 값이 undefined일 수도 있다면, OR(||) 연산자를 사용하면 해당 값이 undefined일 때 사용할 값을 지정할 수 있다.const name = undefined;return name || '값이 undefined입니다.';name값이 undefined일때 보여 주고 싶은 문구가 있다면 다음과 같이 코드를 작성하면 된다.const name = undefined;return &lt;div&gt;{name || '리액트'}&lt;/div&gt;;속성html에서의 속성과 jsx에서의 속성은 사용하는 명칭이 살짝 다르다.우선, ‘-‘으로 표기되는 것들은 카멜표기법으로 한다. 예를 들어, style 중에 background-color는 backgroundColor로 작성해야 하고 font-size는 fontSize로 작성된다. 특히, class의 경우 className으로 작성해야 한다.인라인 스타일링은 중괄호를 두번 사용하여 작성한다.&lt;div style = {{ backgroundColor = 'black' }}&gt;&lt;/div&gt;주석jsx 내부에서 주석을 사용할 때는 다음과 같이 작성한다.{/* 주석은 이렇게 작성합니다. */}jsx 내부에서 //나 /* */로만 작성하면 주석으로 처리되지 않고 그대로 표시된다." }, { "title": "Enable Google Page Views", "url": "/posts/enable-google-pv/", "categories": "Blogging, Tutorial", "tags": "google analytics, pageviews", "date": "2021-01-04 08:32:00 +0900", "snippet": "This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well. Head to https://analytics.google.com/ and click on Start Measuring Enter your desired Account Name and choose the desired checkboxes Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard Enter the required information About your business Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps: Go to Admin on the left column Select the desired property from the drop-down on the second column Click on Data Streams Add a stream and click on Web Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml file:google_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID # Google Analytics pageviews report settings pv: proxy_endpoint: # fill in the Google Analytics superProxy endpoint of Google App Engine cache_path: # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine Visit https://console.cloud.google.com/appengine Click on Create Application Click on Create Project Enter the name and choose the data center close to you Select Python language and Standard environment Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient. Go to your App Engine dashboard on your browser and select API &amp; Services from the left navigation menu Click on Enable APIs and Services button on the top Enable the following APIs: Google Analytics API On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&lt;project-id&gt;.&lt;region&gt;.r.appspot.com/admin/auth Note down the Your Client ID and Your Client Secret. You’ll need this in the next section. Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart Run the following commands: [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=XYZ.apps.googleusercontent.com&amp;redirect_uri=ABCDEFGEnter verification code: &lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here Setup Google Analytics superProxy Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local. Remove the first 2 lines in the src/app.yaml file: - application: your-project-id- version: 1 In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard. Enter any random key for XSRF_KEY, your config.py should look similar to this #!/usr/bin/python2.7__author__ = 'pete.frisella@gmail.com (Pete Frisella)'# OAuth 2.0 Client SettingsAUTH_CONFIG = { 'OAUTH_CLIENT_ID': 'YOUR_CLIENT_ID', 'OAUTH_CLIENT_SECRET': 'YOUR_CLIENT_SECRET', 'OAUTH_REDIRECT_URI': '%s%s' % ( 'https://chirpy-test-XXXXXX.ue.r.appspot.com', '/admin/auth' )}# XSRF SettingsXSRF_KEY = 'OnceUponATimeThereLivedALegend' You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com.But, for the sake of keeping it simple, we will be using the Google provided default URL. From inside the src/ directory, deploy the app [root@bc96abf71ef8 src]# gcloud app deployServices to deploy:descriptor: [/tmp/google-analytics-super-proxy/src/app.yaml]source: [/tmp/google-analytics-super-proxy/src]target project: [chirpy-test-XXXX]target service: [default]target version: [VESRION_NUM]target url: [https://chirpy-test-XXXX.ue.r.appspot.com]Do you want to continue (Y/n)? YBeginning deployment of service [default]...╔════════════════════════════════════════════════════════════╗╠═ Uploading 1 file to Google Cloud Storage ═╣╚════════════════════════════════════════════════════════════╝File upload done.Updating service [default]...done.Setting traffic split for service [default]...done.Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com]You can stream logs from the command line by running:$ gcloud app logs tail -s defaultTo view your application in the web browser run:$ gcloud app browse Visit the deployed service. Add a /admin to the end of the URL. Click on Authorize Users and make sure to add yourself as a managed user. If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix. If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows: start-date: fill in the first day of blog posting end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date) metrics: select ga:pageviews dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1: filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=. Among them, ; means using logical AND to concatenate two rules. If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl. After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID pv: proxy_endpoint: 'https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&lt;ID FROM SUPER PROXY&gt;' cache_path: # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference Google Analytics Core Reporting API: Filters &#8617; " }, { "title": "Customize the Favicon", "url": "/posts/customize-the-favicon/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2019-08-11 01:34:00 +0900", "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files: browserconfig.xml site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files: File(s) From Online Tool From Chirpy *.PNG ✓ ✗ *.ICO ✓ ✗ ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition." }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "Blogging, Tutorial", "tags": "getting started", "date": "2019-08-09 21:55:00 +0900", "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler. In addition, Git is also required to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme: Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing. Forking on GitHub - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterCreate a new repository from the Chirpy Starter and name it &lt;GH_USERNAME&gt;.github.io, where GH_USERNAME represents your GitHub username.Option 2. Forking on GitHubFork Chirpy on GitHub and rename it to &lt;GH_USERNAME&gt;.github.io. Please note that the default branch code is in development. If you want the site to be stable, please switch to the latest tag and start writing.And then execute:$ bash tools/init.sh If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will: Removes some files or directories from your repository: .travis.yml files under _posts If the option --no-gh is provided, the directory .github will be deleted. Otherwise, set up the GitHub Action workflow by removing the extension .hook of .github/workflows/pages-deploy.yml.hook, and then remove the other files and directories in the folder .github. Removes item Gemfile.lock from .gitignore. Creates a new commit to save the changes automatically.Installing DependenciesBefore running for the first time, go to the root directory of your site, and install dependencies as follows:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options: url avatar timezone langCustoming StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/style.scss to the same path on your Jekyll site, and then add the custom style at the end of the style file.Starting from v4.1.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, create a new file _sass/variables-hook.scss and assign new values to the target variable in it.Customing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined by file _data/assets/cross_origin.yml, and you can replace some of them according to the network conditions in the region where your website is published.Also, if you’d like to self-host the static assets, please refer to the chirpy-static-assets.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sOr run the site on Docker with the following command:$ docker run -it --rm \\ --volume=\"$PWD:/srv/jekyll\" \\ -p 4000:4000 jekyll/jekyll \\ jekyll serveAfter a while, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using Github ActionsFor security reasons, GitHub Pages build runs on safe mode, which restricts us from using plugins to generate additional page files. Therefore, we can use GitHub Actions to build the site, store the built site files on a new branch, and use that branch as the source of the GitHub Pages service.Quickly check the files needed for GitHub Actions build: Ensure your Jekyll site has the file .github/workflows/pages-deploy.yml. Otherwise, create a new one and fill in the contents of the sample file, and the value of the on.push.branches should be the same as your repo’s default branch name. Ensure your Jekyll site has file tools/deploy.sh. Otherwise, copy it from here to your Jekyll site. Furthermore, if you have committed Gemfile.lock to the repo, and your runtime system is not Linux, don’t forget to update the platform list in the lock file: $ bundle lock --add-platform x86_64-linux After the above steps, rename your repository to &lt;GH_USERNAME&gt;.github.io on GitHub.Now publish your Jekyll site by: Push any commit to remote to trigger the GitHub Actions workflow. Once the build is complete and successful, a new remote branch named gh-pages will appear to store the built site files. Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar, and then in the section Source of GitHub Pages, select the /(root) directory of branch gh-pages as the publishing source. Remember to click Save before leaving. Visit your website at the address indicated by GitHub. Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bOr build the site on Docker:$ docker run -it --rm \\ --env JEKYLL_ENV=production \\ --volume=\"$PWD:/srv/jekyll\" \\ jekyll/jekyll \\ jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server.UpgradingIt depends on how you use the theme: If you are using the theme gem (there will be gem \"jekyll-theme-chirpy\" in the Gemfile), editing the Gemfile and update the version number of the theme gem, for example: - gem \"jekyll-theme-chirpy\", \"~&gt; 3.2\", \"&gt;= 3.2.1\"+ gem \"jekyll-theme-chirpy\", \"~&gt; 3.3\", \"&gt;= 3.3.0\" And then execute the following command: $ bundle update jekyll-theme-chirpy As the version upgrades, the critical files (for details, see the Startup Template) and configuration options will change. Please refer to the Upgrade Guide to keep your repo’s files in sync with the latest version of the theme. If you forked from the source project (there will be gemspec in the Gemfile of your site), then merge the latest upstream tags into your Jekyll site to complete the upgrade.The merge is likely to conflict with your local modifications. Please be patient and careful to resolve these conflicts. " }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Blogging, Tutorial", "tags": "writing", "date": "2019-08-08 15:10:00 +0900", "snippet": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase--- The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Add author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one.)&lt;author_id&gt;: name: &lt;full name&gt; twitter: &lt;twitter_of_author&gt; url: &lt;homepage_of_author&gt;And then set up the custom author in the post’s YAML block:---author: &lt;author_id&gt;--- Another benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right. Once the position is specified, the image caption should not be added. Normal position Image will be left aligned in below sample: ![Desktop View](/assets/img/sample/mockup.png){: .normal } Float to the left ![Desktop View](/assets/img/sample/mockup.png){: .left } Float to the right ![Desktop View](/assets/img/sample/mockup.png){: .right } ShadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\"&gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&lt;img src=\"/img/path/flower.png\" alt=\"The flower\"&gt;Preview ImageIf you want to add an image to the top of the post contents, specify the attribute path, width, height, and alt for the image:---image: path: /path/to/image/file width: 1000 # in pixels height: 400 # in pixels alt: image alternative text---Except for alt, all other options are necessary, especially the width and height, which are related to user experience and web page loading performance. The above section “Size” also mentions this.Starting from Chirpy v5.0.0, the attributes height and width can be abbreviated: height → h, width → w. In addition, the img_path can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value``` The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %} This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts." }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Blogging, Demo", "tags": "typography", "date": "2019-08-08 12:33:00 +0900", "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.ListsOrdered list Firstly Secondly ThirdlyUnordered list Chapter Section Paragraph Task list TODO Completed Defeat COVID-19 Vaccine production Economic recovery People smile again Description list Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sunBlock Quote This line shows the block quote.Prompts An example showing the tip type prompt. An example showing the info type prompt. An example showing the warning type prompt. An example showing the danger type prompt.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Images Default (with caption)Full screen width and center alignment Shadowshadow effect (visible in light mode) Left aligned Float to left “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Float to right “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Mermaid SVG gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashShellif [ $? -ne 0 ]; then echo \"The command was not successful.\"; #do the needful / exitfi;Specific filename@import \"colors/light-typography\", \"colors/dark-typography\"Reverse Footnote The footnote source &#8617; The 2nd footnote source &#8617; " } ]
